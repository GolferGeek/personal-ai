
Skip to content
Navigation Menu

    langchain-ai

    langchainjs-mcp-adapters

Code
Issues 2
Pull requests
Actions
Projects
Security

    Insights

Owner avatar
langchainjs-mcp-adapters
Public

langchain-ai/langchainjs-mcp-adapters
t
Name	Last commit message
	Last commit date
github-actions[bot]
github-actions[bot]
chore: bump version to v0.4.0 [skip ci]
60458b9
 ¬∑ 
Apr 3, 2025
.github
	
fix: fix post-release commit (#34)
	
Mar 21, 2025
.husky
	
fix: update husky pre-commit hook and add GitHub Actions permissions
	
Mar 3, 2025
.vscode
	
break: simplify interface, drop file IO, accept common mcp server con‚Ä¶
	
Apr 3, 2025
.yarn
	
fix: fix CJS by dynamically importing json-schema-to-zod (#37)
	
Mar 23, 2025
__tests__
	
break: simplify interface, drop file IO, accept common mcp server con‚Ä¶
	
Apr 3, 2025
examples
	
break: simplify interface, drop file IO, accept common mcp server con‚Ä¶
	
Apr 3, 2025
src
	
break: simplify interface, drop file IO, accept common mcp server con‚Ä¶
	
Apr 3, 2025
.eslintrc.cjs
	
break: simplify interface, drop file IO, accept common mcp server con‚Ä¶
	
Apr 3, 2025
.gitignore
	
fix: build & import issues (#32)
	
Mar 21, 2025
.npmignore
	
chore: prepare for npm publishing, add .npmignore, CHANGELOG and CONT‚Ä¶
	
Mar 3, 2025
.prettierrc
	
fix: build & import issues (#32)
	
Mar 21, 2025
.yarnrc.yml
	
fix: build & import issues (#32)
	
Mar 21, 2025
CHANGELOG.md
	
Release v0.1.7
	
Mar 8, 2025
CONTRIBUTING.md
	
chore: prepare for npm publishing, add .npmignore, CHANGELOG and CONT‚Ä¶
	
Mar 3, 2025
LICENSE
	
chore: prepare for npm publishing, add .npmignore, CHANGELOG and CONT‚Ä¶
	
Mar 3, 2025
README.md
	
chore: update README to reflect recent changes (#53)
	
Apr 3, 2025
RELEASE_NOTES.md
	
Release v0.1.7
	
Mar 8, 2025
langchain.config.js
	
fix: build & import issues (#32)
	
Mar 21, 2025
package.json
	
chore: bump version to v0.4.0 [skip ci]
	
Apr 3, 2025
tsconfig.cjs.json
	
fix: build & import issues (#32)
	
Mar 21, 2025
tsconfig.examples.json
	
break: remove winston in favor of the debug package (#25)
	
Mar 19, 2025
tsconfig.json
	
fix: build & import issues (#32)
	
Mar 21, 2025
tsconfig.tests.json
	
break: simplify interface, drop file IO, accept common mcp server con‚Ä¶
	
Apr 3, 2025
vitest.config.ts
	
fix: pass inputSchema to LangChain tools & fail loudly (#20)
	
Mar 18, 2025
vitest.setup.ts
	
fix: pass inputSchema to LangChain tools & fail loudly (#20)
	
Mar 18, 2025
yarn.lock
	
break: simplify interface, drop file IO, accept common mcp server con‚Ä¶
	
Apr 3, 2025
Repository files navigation

README

    MIT license

LangChain.js MCP Adapters

npm version License: MIT

This library provides a lightweight wrapper that makes Anthropic Model Context Protocol (MCP) tools compatible with LangChain.js and LangGraph.js.
Features

    üîå Transport Options
        Connect to MCP servers via stdio (local) or SSE (remote)
        Support for custom headers in SSE connections for authentication
        Configurable reconnection strategies for both transport types

    üîÑ Multi-Server Management
        Connect to multiple MCP servers simultaneously
        Auto-organize tools by server or access them as a flattened collection
        Convenient configuration via JSON file

    üß© Agent Integration
        Compatible with LangChain.js and LangGraph.js
        Optimized for OpenAI, Anthropic, and Google models
        Supports rich content responses including text, images, and embedded resources

    üõ†Ô∏è Development Features
        Uses debug package for debug logging
        Flexible configuration options
        Robust error handling

Installation

npm install @langchain/mcp-adapters

Optional Dependencies

For SSE connections with custom headers in Node.js:

npm install eventsource

For enhanced SSE header support:

npm install extended-eventsource

Example: Manage the MCP Client yourself

This example shows how you can manage your own MCP client and use it to get tools that you can pass to a LangGraph prebuilt ReAcT agent.

npm install @langchain/mcp-adapters @langchain/langgraph @langchain/core @langchain/openai

export OPENAI_API_KEY=<your_api_key>

Client

import { Client } from "@modelcontextprotocol/sdk/client/index.js";
import { StdioClientTransport } from "@modelcontextprotocol/sdk/client/stdio.js";
import { ChatOpenAI } from "@langchain/openai";
import { createReactAgent } from "@langchain/langgraph/prebuilt";
import { loadMcpTools } from "@langchain/mcp-adapters";

// Initialize the ChatOpenAI model
const model = new ChatOpenAI({ modelName: "gpt-4" });

// Automatically starts and connects to a MCP reference server
const transport = new StdioClientTransport({
  command: "npx",
  args: ["-y", "@modelcontextprotocol/server-math"],
});

// Initialize the client
const client = new Client({
  name: "math-client",
  version: "1.0.0",
});

try {
  // Connect to the transport
  await client.connect(transport);

  // Get tools with custom configuration
  const tools = await loadMcpTools("math", client, {
    // Whether to throw errors if a tool fails to load (optional, default: true)
    throwOnLoadError: true,
    // Whether to prefix tool names with the server name (optional, default: false)
    prefixToolNameWithServerName: false,
    // Optional additional prefix for tool names (optional, default: "")
    additionalToolNamePrefix: "",
  });

  // Create and run the agent
  const agent = createReactAgent({ llm: model, tools });
  const agentResponse = await agent.invoke({
    messages: [{ role: "user", content: "what's (3 + 5) x 12?" }],
  });
  console.log(agentResponse);
} catch (e) {
  console.error(e);
} finally {
  // Clean up connection
  await client.close();
}

Example: Connect to one or more servers via config

The library also allows you to connect to multiple MCP servers and load tools from them:
Client

import { MultiServerMCPClient } from "@langchain/mcp-adapters";
import { ChatOpenAI } from "@langchain/openai";
import { createReactAgent } from "@langchain/langgraph/prebuilt";

// Create client and connect to server
const client = new MultiServerMCPClient({
  // Global tool configuration options
  // Whether to throw on errors if a tool fails to load (optional, default: true)
  throwOnLoadError: true,
  // Whether to prefix tool names with the server name (optional, default: true)
  prefixToolNameWithServerName: true,
  // Optional additional prefix for tool names (optional, default: "mcp")
  additionalToolNamePrefix: "mcp",

  // Server configuration
  mcpServers: {
    // adds a STDIO connection to a server named "math"
    math: {
      transport: "stdio",
      command: "npx",
      args: ["-y", "@modelcontextprotocol/server-math"],
      // Restart configuration for stdio transport
      restart: {
        enabled: true,
        maxAttempts: 3,
        delayMs: 1000,
      },
    },

    // here's a filesystem server
    filesystem: {
      transport: "stdio",
      command: "npx",
      args: ["-y", "@modelcontextprotocol/server-filesystem"],
    },

    // SSE transport example with reconnection configuration
    weather: {
      transport: "sse",
      url: "https://example.com/mcp-weather",
      headers: {
        Authorization: "Bearer token123",
      },
      useNodeEventSource: true,
      reconnect: {
        enabled: true,
        maxAttempts: 5,
        delayMs: 2000,
      },
    },
  },
});

const tools = await client.getTools();

// Create an OpenAI model
const model = new ChatOpenAI({
  modelName: "gpt-4o",
  temperature: 0,
});

// Create the React agent
const agent = createReactAgent({
  llm: model,
  tools,
});

// Run the agent
try {
  const mathResponse = await agent.invoke({
    messages: [{ role: "user", content: "what's (3 + 5) x 12?" }],
  });
  console.log(mathResponse);
} catch (error) {
  console.error("Error during agent execution:", error);
  // Tools throw ToolException for tool-specific errors
  if (error.name === "ToolException") {
    console.error("Tool execution failed:", error.message);
  }
}

await client.close();

For more detailed examples, see the examples directory.
Tool Configuration Options

When loading MCP tools either directly through loadMcpTools or via MultiServerMCPClient, you can configure the following options:
Option 	Type 	Default 	Description
throwOnLoadError 	boolean 	true 	Whether to throw an error if a tool fails to load
prefixToolNameWithServerName 	boolean 	false 	If true, prefixes all tool names with the server name (e.g., serverName__toolName)
additionalToolNamePrefix 	string 	"" 	Additional prefix to add to tool names (e.g., prefix__serverName__toolName)
Response Handling

MCP tools return results in the content_and_artifact format which can include:

    Text content: Plain text responses
    Image content: Base64-encoded images with MIME type
    Embedded resources: Files, structured data, or other resources

Example for handling different content types:

const tool = tools.find((t) => t.name === "mcp__math__calculate");
const result = await tool.invoke({ expression: "(3 + 5) * 12" });

// Result format: [content, artifacts]
// - content: string | MessageContentComplex[]
// - artifacts: EmbeddedResource[]

const [textContent, artifacts] = result;

// Handle text content
if (typeof textContent === "string") {
  console.log("Result:", textContent);
} else {
  // Handle complex content (text + images)
  textContent.forEach((item) => {
    if (item.type === "text") {
      console.log("Text:", item.text);
    } else if (item.type === "image_url") {
      console.log("Image URL:", item.image_url.url);
    }
  });
}

// Handle artifacts if needed
if (artifacts.length > 0) {
  console.log("Received artifacts:", artifacts);
}

Reconnection Strategies

Both transport types support automatic reconnection:
Stdio Transport Restart

{
  transport: "stdio",
  command: "npx",
  args: ["-y", "@modelcontextprotocol/server-math"],
  restart: {
    enabled: true,      // Enable automatic restart
    maxAttempts: 3,     // Maximum restart attempts
    delayMs: 1000       // Delay between attempts in ms
  }
}

SSE Transport Reconnect

{
  transport: "sse",
  url: "https://example.com/mcp-server",
  headers: { "Authorization": "Bearer token123" },
  useNodeEventSource: true,
  reconnect: {
    enabled: true,      // Enable automatic reconnection
    maxAttempts: 5,     // Maximum reconnection attempts
    delayMs: 2000       // Delay between attempts in ms
  }
}

Error Handling

The library provides different error types to help with debugging:

    MCPClientError: For client connection and initialization issues
    ToolException: For errors during tool execution
    ZodError: For configuration validation errors (invalid connection settings, etc.)

Example error handling:

try {
  const client = new MultiServerMCPClient({
    math: {
      transport: "stdio",
      command: "npx",
      args: ["-y", "@modelcontextprotocol/server-math"],
    },
  });

  const tools = await client.getTools();
  const result = await tools[0].invoke({ expression: "1 + 2" });
} catch (error) {
  if (error.name === "MCPClientError") {
    // Handle connection issues
    console.error(`Connection error (${error.serverName}):`, error.message);
  } else if (error.name === "ToolException") {
    // Handle tool execution errors
    console.error("Tool execution failed:", error.message);
  } else if (error.name === "ZodError") {
    // Handle configuration validation errors
    console.error("Configuration error:", error.issues);
    // Zod errors contain detailed information about what went wrong
    error.issues.forEach((issue) => {
      console.error(`- Path: ${issue.path.join(".")}, Error: ${issue.message}`);
    });
  } else {
    // Handle other errors
    console.error("Unexpected error:", error);
  }
}

Common Zod Validation Errors

The library uses Zod for validating configuration. Here are some common validation errors:

    Missing required parameters: For example, omitting command for stdio transport or url for SSE transport
    Invalid parameter types: For example, providing a number where a string is expected
    Invalid connection configuration: For example, using an invalid URL format for SSE transport

Example Zod error for an invalid SSE URL:

{
  "issues": [
    {
      "code": "invalid_string",
      "validation": "url",
      "path": ["mcpServers", "weather", "url"],
      "message": "Invalid url"
    }
  ],
  "name": "ZodError"
}

Browser Environments

When using in browsers:

    Native EventSource API doesn't support custom headers
    Consider using a proxy or pass authentication via query parameters
    May require CORS configuration on the server side

Troubleshooting
Common Issues

    Connection Failures:
        Verify the MCP server is running
        Check command paths and network connectivity

    Tool Execution Errors:
        Examine server logs for error messages
        Ensure input parameters match the expected schema

    Headers Not Applied:
        Install the recommended extended-eventsource package
        Set useNodeEventSource: true in SSE connections

Debug Logging

This package makes use of the debug package for debug logging.

Logging is disabled by default, and can be enabled by setting the DEBUG environment variable as per the instructions in the debug package.

To output all debug logs from this package:

DEBUG='@langchain/mcp-adapters:*'

To output debug logs only from the client module:

DEBUG='@langchain/mcp-adapters:client'

To output debug logs only from the tools module:

DEBUG='@langchain/mcp-adapters:tools'

License

MIT
Acknowledgements

Big thanks to @vrknetha, @cawstudios for the initial implementation!
Contributing

Contributions are welcome! Please check out our contributing guidelines for more information.
About

Adapters for integrating Model Context Protocol (MCP) tools with LangChain.js applications, supporting both stdio and SSE transports.
Topics
javascript typescript mcp ai-tools langchain llm-tools openai-functions langchainjs llm-agents agent-tools llm-integration model-context-protocol
Resources
Readme
License
MIT license
Activity
Custom properties
Stars
110 stars
Watchers
2 watching
Forks
15 forks
Report repository
Releases 14
v0.4.0 Latest
Apr 3, 2025
+ 13 releases
Packages
No packages published
Contributors 4

    @vrknetha
    vrknetha Ravi Kiran Vemula
    @benjamincburns
    benjamincburns Ben Burns
    @github-actions[bot]
    github-actions[bot]
    @vbarda
    vbarda Vadym Barda

Languages

TypeScript 96.1%

    JavaScript 3.9% 

Footer
¬© 2025 GitHub, Inc.
Footer navigation

    Terms
    Privacy
    Security
    Status
    Docs
    Contact

